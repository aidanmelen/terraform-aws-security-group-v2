content: |-
  {{ .Header }}
  ## Features

  This module aims to implement **ALL** combinations of arguments supported by AWS and latest stable version of Terraform:

  - IPv4/IPv6 CIDR blocks
  - [VPC endpoint prefix lists](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html) (use data source [aws_prefix_list](https://www.terraform.io/docs/providers/aws/d/prefix_list.html))
  - Access from source security groups
  - Access from self
  - Named rules ([see the rules here](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/rules.tf))
  - Toggle creation of common rules like egress all to the public internet.
  - Conditionally create security group and/or all required security group rules.

  ## Examples

  ### Security Group with basic rules

  Create a security group with HTTPS from `10.0.0.0/24`, `all-all` from self, and `all-all` to the public internet rules.

  ```hcl
  {{ include "examples/basic/.main.tf.docs" }}
  ```

  Please see the [Basic Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/basic) for more information.

  ### Security Group with complete rules

  Create a security group with a combination of both managed, custom, computed, and auto group rules. This also demonstrates the conditional create functionality.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/complete/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Complete Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/complete) for more information.

  ### Security group with custom rules

  Create a security group with custom rules.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/custom_rules/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Custom Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/rules) for more information.

  ### Security group with managed rules

  Create a security group with managed rules.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/managed_rules/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Managed Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/managed_rules) for more information.

  ### Security group with computed rules

  Create a security group with a computed rules. Computed security group rules uses `count` to dynamically create rules with unknown values during the initial Terraform plan. Please see [Limitations on values used in for_each](https://www.terraform.io/language/meta-arguments/for_each#limitations-on-values-used-in-for_each).

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/computed_rules/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Computed Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/computed_rules) for more information.

  ### Only rules with pre-existing security group

  Use the module to create rules for a pre-existing security group.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/rules_only/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Rules Only Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/rules_only) for more information.

  ## Tests

  Run Terratest using the [Makefile](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/Makefile) targets:
  1. `make setup`
  2. `make tests`

  ### Results

  ```
  {{ include "test/.terratest.docs" }}
  ```

  ## Makefile Targets

  ```
  {{ include ".makefile.docs" }}
  ```

  {{ .Requirements }}
  {{ .Resources }}
  {{ .Inputs }}
  {{ .Outputs }}

  ## Acknowledgments

  This modules aims to improve on the venerable [terraform-aws-modules/terraform-aws-security-group](https://github.com/terraform-aws-modules/terraform-aws-security-group) module authored by [Anton Babenko](https://github.com/antonbabenko). It does so by:

  - Reduce amount of code with [`for` expressions](https://www.terraform.io/language/expressions/for).
  - Follow DRY principals by using [Conditionally Omitted Arguments](https://www.hashicorp.com/blog/terraform-0-12-conditional-operator-improvements#conditionally-omitted-arguments).
  - Dynamically create custom and managed security group rule resources [`for_each` meta-arguments](https://www.terraform.io/language/meta-arguments/for_each). This has 2 advantages over `count`:
    1. The terraform resource IDs are descriptive rather than indexes with `count`.
    2. Adding/Removing or even reordering rules can causes the count indexes to change possibly resulting in unwanted destruction and recreation of resources. Whereas `for_each` with map inputs use identifiable keys and do not suffer from this constraint.
  - Computed security group rule resources still must still use `count` due to [Limitations on values used in `for_each`](https://www.terraform.io/language/meta-arguments/for_each#limitations-on-values-used-in-for_each). However, this implementation of `count` dynamically uses the `length()` function rather than relying on the user to provided `number_of_computed` variables. [When to Use for_each Instead of count](https://www.terraform.io/language/meta-arguments/count#when-to-use-for_each-instead-of-count).
  - Improve security by declaring granular security group rules. Use [AWS Prefix Lists](https://docs.aws.amazon.com/vpc/latest/userguide/managed-prefix-lists.html) to apply rules to many IPV4/IPV6 CIDRs or use the `for` expression with computed rules for other rule resources.
  - Test examples with [Terratest](https://terratest.gruntwork.io/).

  ## License

  Apache 2 Licensed. See [LICENSE](https://github.com/aidanmelen/terraform-kubernetes-confluent-platform/blob/main/LICENSE) for full details.
