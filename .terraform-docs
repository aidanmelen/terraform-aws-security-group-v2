content: |-
  {{ .Header }}
  ## Features

  This module aims to implement **ALL** combinations of arguments supported by AWS and latest stable version of Terraform:

  - customer ingress/egress rules.
  - Managed ingress/egress rules (e.g. `all-all`, `https-443-tcp`, `postgresql-tcp`, and `ssh-tcp`  just to name a few.). Please see [rules.tf](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/rules.tf) for the complete list of managed rules.
  - Common Ingress/Egress for common scenarios sech as `all-from-self`, `https-from-public`, and `all-to-public` just to name a few. Please see [rules.tf](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/rules.tf) for the complete list of common rules.
  - Computed ingress/egress rules for manage Security Group rules that reference unknown values such as: aws_vpc.vpc.cidr_blocks, aws_security_group.sg.id, etc. computed rules support all customer, managed, and common rules.
  - Conditionally create security group and/or all required security group rules.

  What's more, this module was modeled after the [terraform-aws-modules/terraform-aws-security-group](hhttps://github.com/terraform-aws-modules/terraform-aws-security-group#features) module and aims to have feature parody.

  ## Examples

  ### Security Group with basic rules

  Create a security group using:

  - The `https-443-tcp` managed ingress rule
  - The `all-from-self` common ingress rule
  - The `all-to-public` common egress rule

  ```hcl
  {{ include "examples/basic/.main.tf.docs" }}
  ```

  Please see the [Basic Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/basic) for more information.

  ### Security Group with complete rules

  Create a AWS Security Group with a broad mix of various features and settings provided by this module.

  ```hcl
  {{ include "examples/complete/.main.tf.docs" }}
  ```

  Please see the [Complete Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/complete) for more information.

  ### Security Group with common scenario rules

  Create security group with common scenario rules (e.g. `https-from-public`, `all-from-self`, `all-to-public`, etc). This is like a shortcut for managed rules that have a known source or destination.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/common/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Common Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/common) for more information.

  ### Security Group with customer rules

  Create a security group with customer rules. customer rules for security groups are analogous to [AWS customer policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#customer-managed-policies) for IAM.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/customer/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [customer Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/rules) for more information.

  ### Security Group with managed rules

  Create a security group with managed rules. Managed rules for security groups are analogous to [AWS managed policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#aws-managed-policies) for IAM.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/managed/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Managed Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/managed) for more information.

  ### Security Group with computed rules

  Create a security group with a computed rules. Computed security group rules uses `count` to dynamically create rules with unknown values during the initial Terraform plan. Please see [Limitations on values used in for_each](https://www.terraform.io/language/meta-arguments/for_each#limitations-on-values-used-in-for_each).

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/computed/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Computed Rules Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/computed) for more information.

  ### Only rules with pre-existing security group

  Use the module to create rules for a pre-existing security group.

  <details><summary>Click to show</summary>

  ```hcl
  {{ include "examples/rules_only/.main.tf.docs" }}
  ```

  </details><br/>

  Please see the [Rules Only Example](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/examples/rules_only) for more information.

  ## Tests

  Run Terratest using the [Makefile](https://github.com/aidanmelen/terraform-aws-security-group-v2/tree/main/Makefile) targets:
  1. `make setup`
  2. `make tests`

  ### Results

  ```
  {{ include "test/.terratest.docs" }}
  ```

  ## Makefile Targets

  ```
  {{ include ".makefile.docs" }}
  ```

  {{ .Requirements }}
  {{ .Resources }}
  {{ .Inputs }}
  {{ .Outputs }}

  ## Acknowledgments

  This modules aims to improve on the venerable [terraform-aws-modules/terraform-aws-security-group](https://github.com/terraform-aws-modules/terraform-aws-security-group) module authored by [Anton Babenko](https://github.com/antonbabenko). It does so by:

  - Reduce amount of code with [`for` expressions](https://www.terraform.io/language/expressions/for).
  - Follow DRY principals by using [Conditionally Omitted Arguments](https://www.hashicorp.com/blog/terraform-0-12-conditional-operator-improvements#conditionally-omitted-arguments).
  - Dynamically create customer and managed security group rule resources with [`for_each` meta-arguments](https://www.terraform.io/language/meta-arguments/for_each). This has 2 advantages over `count`:
    1. The terraform resource IDs are descriptive rather than indexes with `count`.
    2. Adding/Removing or even reordering rules can causes the count indexes to change possibly resulting in unwanted destruction and recreation of resources. Whereas `for_each` with map inputs use identifiable keys and do not suffer from this constraint.
  - Computed security group rule resources still must still use `count` due to [Limitations on values used in `for_each`](https://www.terraform.io/language/meta-arguments/for_each#limitations-on-values-used-in-for_each). However, this implementation uses the `length()` function to dynamically set the `count` rather than relying on the user to provided `number_of_computed` variables. [When to Use for_each Instead of count](https://www.terraform.io/language/meta-arguments/count#when-to-use-for_each-instead-of-count).
  - Encourage the security best practice of restrictive rules by making users **opt-in** to common rules like `create_egress_all_to_public_rules`. Please see [no-public-egress-sgr](https://aquasecurity.github.io/tfsec/v0.61.3/checks/aws/vpc/no-public-egress-sgr/) for more information.
  - Improve security by having users declare granular customer or managed security group rules.
  - Test examples with [Terratest](https://terratest.gruntwork.io/).

  ## License

  Apache 2 Licensed. See [LICENSE](https://github.com/aidanmelen/terraform-kubernetes-confluent-platform/blob/main/LICENSE) for full details.
